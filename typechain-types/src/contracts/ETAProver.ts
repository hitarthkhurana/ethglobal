/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ETAProver {
  export type ETAProofStruct = {
    a: [BigNumberish, BigNumberish];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    c: [BigNumberish, BigNumberish];
    input: BigNumberish[];
  };

  export type ETAProofStructOutput = [
    a: [bigint, bigint],
    b: [[bigint, bigint], [bigint, bigint]],
    c: [bigint, bigint],
    input: bigint[]
  ] & {
    a: [bigint, bigint];
    b: [[bigint, bigint], [bigint, bigint]];
    c: [bigint, bigint];
    input: bigint[];
  };
}

export interface ETAProverInterface extends Interface {
  getFunction(
    nameOrSignature: "generateProofHash" | "proofs" | "submitProof"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ProofGenerated"): EventFragment;

  encodeFunctionData(
    functionFragment: "generateProofHash",
    values: [[BigNumberish, BigNumberish], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "proofs", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "submitProof",
    values: [ETAProver.ETAProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "generateProofHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proofs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitProof",
    data: BytesLike
  ): Result;
}

export namespace ProofGeneratedEvent {
  export type InputTuple = [
    proofHash: BytesLike,
    prover: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    proofHash: string,
    prover: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    proofHash: string;
    prover: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ETAProver extends BaseContract {
  connect(runner?: ContractRunner | null): ETAProver;
  waitForDeployment(): Promise<this>;

  interface: ETAProverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  generateProofHash: TypedContractMethod<
    [
      sourceLocation: [BigNumberish, BigNumberish],
      claimedETA: BigNumberish,
      actualETA: BigNumberish
    ],
    [string],
    "view"
  >;

  proofs: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  submitProof: TypedContractMethod<
    [proof: ETAProver.ETAProofStruct],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "generateProofHash"
  ): TypedContractMethod<
    [
      sourceLocation: [BigNumberish, BigNumberish],
      claimedETA: BigNumberish,
      actualETA: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "proofs"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "submitProof"
  ): TypedContractMethod<
    [proof: ETAProver.ETAProofStruct],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "ProofGenerated"
  ): TypedContractEvent<
    ProofGeneratedEvent.InputTuple,
    ProofGeneratedEvent.OutputTuple,
    ProofGeneratedEvent.OutputObject
  >;

  filters: {
    "ProofGenerated(bytes32,address,uint256)": TypedContractEvent<
      ProofGeneratedEvent.InputTuple,
      ProofGeneratedEvent.OutputTuple,
      ProofGeneratedEvent.OutputObject
    >;
    ProofGenerated: TypedContractEvent<
      ProofGeneratedEvent.InputTuple,
      ProofGeneratedEvent.OutputTuple,
      ProofGeneratedEvent.OutputObject
    >;
  };
}
